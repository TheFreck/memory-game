{"version":3,"sources":["components/tile/Tile.js","components/menu/Menu.js","components/score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","react_default","a","createElement","onClick","callback","name","lib","id","className","textClassName","src","alt","Menu","console","log","state","score","Score","horizontal","header","image","cards","App","gameOver","toggleState","_this","setState","_ref2","Object","defineProperty","restart","_this2","this","components_menu_Menu","i","length","j","Math","floor","random","_ref","randomizeCards","components_score_Score","map","card","components_tile_Tile","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bf2349b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Card} from \"react-materialize\";\r\nimport \"./Tile.css\";\r\n\r\nconst Tile = props => {\r\n    function turnRed() {\r\n        props.callback(props.name);\r\n    }\r\n\r\n    return (\r\n        <button onClick={turnRed}>\r\n            <Card \r\n                id=\"tileCard\" \r\n                className='blue-grey darken-1' \r\n                textClassName='white-text'\r\n                >\r\n                <div>\r\n                    <img \r\n                        src={props.name} \r\n                        className=\"eyeBall\" \r\n                        alt=\"an eye ball\"\r\n                    />\r\n                </div>\r\n            </Card>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Tile;","import React from \"react\";\r\nimport {Card} from \"react-materialize\";\r\nimport \"./Menu.css\";\r\n\r\nconst Menu = props => {\r\n    function playAgain() {\r\n        props.callback(props.name);\r\n    }\r\n    console.log(\"props: \", props)\r\n    return (\r\n        <div className=\"menu\">\r\n            <Card className=\"menuCard\">\r\n                <section>\r\n                    <p>Your score was: {props.state.score}</p>\r\n                    <button onClick={playAgain}>Play Again</button>\r\n                </section>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;","import React from \"react\";\r\nimport {Card, CardTitle} from \"react-materialize\";\r\nimport \"./Score.css\";\r\n\r\nconst Score = props => {\r\n\r\n    return (\r\n        <Card \r\n            horizontal header={\r\n                <CardTitle \r\n                    image=\"images/logo.png\"\r\n                    className=\"scoreCard\"\r\n                >\r\n                </CardTitle>\r\n            } \r\n        >\r\n            <h2>Score: {props.state.score}</h2>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Score;","import React, { Component } from 'react';\nimport Tile from \"./components/tile/Tile\";\nimport Menu from \"./components/menu/Menu\";\nimport Score from \"./components/score/Score\";\nimport './App.css';\n\n\n// before each render check to see if any state variables are false\n\nconst cards = [\n  \"images/0uqxfkljdewz.jpg\",\n  \"images/eye_cn3_palsey3.jpg\",\n  \"images/eyes.jpg\",\n  \"images/makeup_620.jpg\",\n  \"images/Makeup-Artist-Who-Uses-Bugs-Eye-Shadow.jpg\",\n  \"images/maxresdefault-1.jpg\",\n  \"images/maxresdefault.jpg\",\n  \"images/MM8355_150911_24310.ngsversion.1497983407079.adapt.1900.1.jpg\",\n  \"images/saturn-585x390.jpg\",\n  \"images/01-animal-eyes-nationalgeographic_2347532.ngsversion.1538656201270.adapt.1900.1.jpg\",\n  \"images/1-animal-eyes.jpg\",\n  \"images/closeup-eye-photos.jpg\",\n];\nconst randomizeCards = (cards)=> {\n  for (let i = cards.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [cards[i], cards[j]] = [cards[j], cards[i]];\n  }\n  return cards;\n}\n\nclass App extends Component {\n  state = {\n    score: 0,\n    gameOver: false\n  };\n  \n  \n  // answerKey = ()=> {\n\n  // }\n  \n  toggleState = (name)=> {\n    if(this.state[name]){\n      console.log(\"game over\");\n      this.setState(() => ({\n        gameOver: true\n      }))\n      // build a modal to take the place of the alert\n      // when it comes up it will reset the score and allow the user to play again\n    }else{\n      this.setState(state => ({\n        [name]: !state[name],\n        score: state.score + 1\n      }));\n    }\n  }\n  \n  restart = (name)=> {\n    console.log(\"restart\", name);\n    this.setState(()=> ({\n      gameOver: \"restart\"\n    }))\n  }\n\n\n\n  render() {\n    switch(this.state.gameOver) {\n      case true:\n        console.log(\"game overs\");\n        return (\n          <Menu \n            state={this.state} \n            callback={this.restart} \n          />\n        );\n      case false:\n        console.log(\"game on\");\n        randomizeCards(cards);\n        return (\n          <div>\n            <Score state={this.state} />\n            <section className=\"cardTable\">\n              {cards.map((card) =>\n                <Tile \n                  state={this.state} \n                  callback={this.toggleState} \n                  className=\"tile\" \n                  key={card} \n                  name={card} \n                />\n              )}\n            </section>\n          </div>\n        );\n      case \"restart\":\n        return <App />\n      default:\n        return <Menu state={this.state} callback={this.restart} />\n    }\n\n    \n    // if(this.state.gameOver){\n    //   console.log(\"game overs\");\n    //   return (\n    //     <Menu \n    //       state={this.state} \n    //       callback={this.restart} \n    //     />  \n    //   )\n    // }else{\n    //   randomizeCards(cards);\n    //   return (\n    //     <div className=\"cardTable\">\n    //       {cards.map((card) =>\n    //         <Tile \n    //           state={this.state} \n    //           callback={this.toggleState} \n    //           className=\"tile\" \n    //           key={card} \n    //           name={card} \n    //         />\n    //       )}\n    //     </div>\n    //   );\n    // }\n\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}